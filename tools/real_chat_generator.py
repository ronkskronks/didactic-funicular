#!/usr/bin/env python3
"""
üó£Ô∏è REAL CHAT GENERATOR - Gerador de conversas REAIS pra ensinar o bot a falar como gente!
N√£o mais narrativas √©picas quando voc√™ quer um "oi" üòÇ
"""

import random
import re

def generate_casual_conversations():
    """Gera conversas casuais brasileiras REAIS"""
    
    # Templates de conversa casual
    greetings = [
        ("e ai", ["opa", "salve", "fala ai", "beleza", "suave"]),
        ("oi", ["oi", "ol√°", "eae", "oii"]),
        ("bom dia", ["bom dia", "morning", "dia"]),
        ("boa tarde", ["boa tarde", "tarde", "boa"]),
        ("boa noite", ["boa noite", "noite", "boa"]),
        ("como vai", ["bem e voc√™", "tudo certo", "indo", "suave", "de boa"]),
        ("tudo bem", ["tudo sim", "tudo joia", "massa", "beleza"]),
        ("como est√°", ["bem obrigado", "indo que nem", "vivendo", "aqui na luta"])
    ]
    
    # Conversas sobre atividades
    activities = [
        ("o que voc√™ est√° fazendo", ["estudando", "trabalhando", "relaxando", "vendo netflix", "jogando"]),
        ("que planos pra hoje", ["nada demais", "estudar um pouco", "trabalhar", "sair com amigos"]),
        ("como foi o dia", ["corrido", "tranquilo", "produtivo", "cansativo", "legal"]),
        ("o que fez ontem", ["trabalhei", "estudei", "sa√≠ com amigos", "fiquei em casa", "descansamos"]),
        ("que horas s√£o", ["meio dia", "umas 3", "tarde j√°", "cedo ainda", "n√£o sei"])
    ]
    
    # Conversas sobre tecnologia/programa√ß√£o
    tech_talks = [
        ("voc√™ programa", ["sim, python", "um pouco", "t√¥ aprendendo", "java principalmente", "n√£o muito"]),
        ("qual linguagem prefere", ["python √© massa", "javascript", "depende do projeto", "c++ √© complicado"]),
        ("j√° usou ia", ["chatgpt √© louco", "um pouco", "sempre", "t√¥ testando", "impressionante"]),
        ("o que acha de ai", ["vai dominar tudo", "√© o futuro", "ajuda muito", "meio assustador", "incr√≠vel"])
    ]
    
    # Conversas sobre entretenimento
    entertainment = [
        ("viu algum filme bom", ["vi matrix", "nada ultimamente", "stranger things", "aquele da netflix"]),
        ("que m√∫sica escuta", ["de tudo", "rock nacional", "sertanejo", "eletr√¥nica", "depende do humor"]),
        ("joga algo", ["cs go", "lol", "mobile", "nada no momento", "s√≥ casual"]),
        ("l√™ livros", ["pouco", "sempre", "s√≥ t√©cnicos", "fic√ß√£o cient√≠fica", "auto ajuda"])
    ]
    
    # Conversas sobre comida
    food_talks = [
        ("j√° almo√ßou", ["sim", "ainda n√£o", "agora pouco", "t√¥ com fome", "vou fazer"]),
        ("o que comeu", ["miojo", "marmita", "pizza", "sandu√≠che", "nada ainda"]),
        ("gosta de cozinhar", ["adoro", "s√≥ o b√°sico", "odeio", "√†s vezes", "s√≥ miojo"]),
        ("qual comida favorita", ["pizza", "hamb√∫rguer", "brasileira", "italiana", "japonesa"])
    ]
    
    # Conversas sobre humor e g√≠rias
    humor_slang = [
        ("mano", ["√©", "sim", "concordo", "exato", "pois √©"]),
        ("cara", ["n√©", "sim", "verdade", "tipo isso", "pois √©"]),
        ("que isso", ["nada", "besteira", "coisa pouca", "vida que segue"]),
        ("nossa", ["n√©", "sim", "demais", "forte", "impressionante"]),
        ("legal", ["massa", "top", "show", "maneiro", "dahora"])
    ]
    
    all_templates = greetings + activities + tech_talks + entertainment + food_talks + humor_slang
    
    conversations = []
    
    # Gera conversas baseadas nos templates
    for user_input, bot_responses in all_templates:
        for response in bot_responses:
            conversations.append((user_input, response))
    
    return conversations

def generate_expanded_conversations():
    """Gera conversas mais longas e naturais"""
    
    expanded_convos = [
        # Programa√ß√£o
        ("t√¥ aprendendo python", "que massa! √© uma linguagem muito boa pra come√ßar"),
        ("python √© dif√≠cil", "no come√ßo parece, mas depois vicia. que parte t√° pegando?"),
        ("n√£o entendo loops", "normal, loops confundem mesmo. quer que eu explique?"),
        ("como fazer uma fun√ß√£o", "def nome_da_funcao(): √© assim que come√ßa"),
        ("o que √© uma vari√°vel", "√© tipo uma caixinha que guarda um valor"),
        ("erro de sintaxe", "Python √© chatinho com indenta√ß√£o, verifica os espa√ßos"),
        ("que editor usar", "VSCode √© top, ou PyCharm se quiser algo mais pesado"),
        
        # Tecnologia geral
        ("ia vai dominar o mundo", "acho que vai mais √© ajudar a gente mesmo"),
        ("chatgpt √© louco", "n√©? conversa que nem gente, impressionante"),
        ("qual melhor celular", "depende do or√ßamento, iPhone ou Galaxy s√£o bons"),
        ("internet t√° lenta", "aqui tamb√©m, deve ser a operadora"),
        ("que app voc√™ usa mais", "whatsapp e youtube, basic√£o mesmo"),
        
        # Cotidiano
        ("t√¥ cansado", "descansa um pouco, trabalho n√£o foge"),
        ("que calor hoje", "demais, ar condicionado no talo aqui"),
        ("chuva finalmente", "nossa sim, terra tava precisando"),
        ("tr√¢nsito infernal", "sempre √©, ainda bem que trabalho home office"),
        ("feriado amanh√£", "que bom, vou aproveitar pra descansar"),
        
        # Conversa informal
        ("que role hoje", "pensei em cinema ou shopping, voc√™ vai?"),
        ("bora sair", "vamos sim, que horas e onde?"),
        ("t√¥ com fome", "eu tamb√©m, bora num hamb√∫rguer?"),
        ("fim de semana", "finalmente! semana foi corrida"),
        ("segunda feira", "pior dia da semana, sem d√∫vida"),
        
        # Humor brasileiro
        ("puts", "n√©, complicado mesmo"),
        ("eita", "orra, que isso?"),
        ("socorro", "calma, vamos resolver isso"),
        ("caramba", "forte mesmo, impressionante"),
        ("nossa senhora", "pesado, n√© n√£o?"),
        
        # Tecnologia e internet
        ("wifi caiu", "√≥dio quando isso acontece, reinicia o roteador"),
        ("computador travou", "ctrl alt del resolve ou reinicia logo"),
        ("celular descarregou", "sempre na hora que mais precisa n√©"),
        ("update do sistema", "demora uma eternidade mas √© importante"),
        ("backup dos arquivos", "sempre bom fazer, nunca se sabe"),
        
        # Estudos e trabalho
        ("prova amanh√£", "estudou bastante? boa sorte!"),
        ("reuni√£o chata", "sempre tem uma n√©, paci√™ncia"),
        ("projeto atrasado", "corre atr√°s que d√° tempo ainda"),
        ("f√©rias chegando", "merecidas! vai viajar?"),
        ("novo emprego", "parab√©ns! como t√° sendo?"),
        
        # Entretenimento
        ("s√©rie nova", "qual? t√¥ precisando de recomenda√ß√£o"),
        ("filme no cinema", "qual assistiu? tava bom?"),
        ("m√∫sica nova", "manda a√≠, sempre curto descobrir"),
        ("jogo viciante", "qual t√° jogando? me recomenda?"),
        ("livro interessante", "sobre o que? gosto de ler tamb√©m"),
        
        # Comida e bebida
        ("pizza hoje", "boa ideia! qual sabor vai pedir?"),
        ("caf√© forte", "precisando mesmo, dia longo pela frente"),
        ("hamb√∫rguer artesanal", "esses gourmet s√£o caros mas s√£o bons"),
        ("cerveja gelada", "fim de semana merece mesmo"),
        ("doce de leite", "fraqueza total, n√£o resisto"),
        
        # Clima e tempo
        ("sol forte", "protetor solar √© essencial, cuidado"),
        ("vento gelado", "inverno chegando, hora do casaco"),
        ("tempo fechado", "parece que vai chover mesmo"),
        ("c√©u limpo", "dia perfeito pra sair de casa"),
        ("neblina densa", "cuidado no tr√¢nsito, visibilidade baixa"),
    ]
    
    return expanded_convos

def generate_multi_turn_conversations():
    """Gera conversas com m√∫ltiplas trocas"""
    
    multi_turn = [
        # Conversa sobre programa√ß√£o
        [
            ("oi", "oi! tudo bem?"),
            ("sim, voc√™ programa", "programo sim, principalmente python"),
            ("legal, t√¥ aprendendo", "que massa! √© uma linguagem muito boa"),
            ("mas t√° dif√≠cil", "normal, no come√ßo √© assim mesmo"),
            ("obrigado pela for√ßa", "sempre! qualquer d√∫vida me chama")
        ],
        
        # Conversa sobre fim de semana
        [
            ("e a√≠", "fala! beleza?"),
            ("suave, que vai fazer hoje", "pensei em cinema, voc√™ vai?"),
            ("qual filme", "aquele novo de a√ß√£o que lan√ßou"),
            ("boa ideia", "ent√£o bora! que horas?"),
            ("umas 7", "fechou, te encontro l√°")
        ],
        
        # Conversa sobre trabalho
        [
            ("como foi o dia", "corrido demais, muita reuni√£o"),
            ("que saco", "pois √©, mas pelo menos acabou"),
            ("vai fazer hora extra", "n√£o, hoje quero descansar"),
            ("faz bem", "e voc√™, como foi seu dia?"),
            ("tranquilo, trabalhei em casa", "home office √© uma ben√ß√£o")
        ],
        
        # Conversa sobre comida
        [
            ("j√° almo√ßou", "ainda n√£o, t√¥ com uma fome"),
            ("eu tamb√©m", "bora num restaurante?"),
            ("qual voc√™ indica", "tem um japon√™s muito bom aqui perto"),
            ("adoro comida japonesa", "ent√£o vamos, fica a 5 minutos"),
            ("perfeito", "me espera que j√° des√ßo")
        ],
        
        # Conversa sobre tecnologia
        [
            ("viu as novidades da apple", "vi sim, iPhone novo t√° caro demais"),
            ("sempre √©", "mas as funcionalidades s√£o legais"),
            ("vale a pena trocar", "depende, seu celular t√° ruim?"),
            ("t√° lento", "ent√£o talvez valha, ou s√≥ formata"),
            ("vou tentar formatar primeiro", "boa ideia, economiza dinheiro")
        ]
    ]
    
    return multi_turn

def create_real_chat_dataset(output_file):
    """Cria dataset completo de conversas reais"""
    
    print("üó£Ô∏è Gerando conversas REAIS brasileiras...")
    
    # Coleta todas as conversas
    casual = generate_casual_conversations()
    expanded = generate_expanded_conversations()
    multi_turn = generate_multi_turn_conversations()
    
    total_conversations = 0
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("# DATASET DE CONVERSAS REAIS - Papo casual brasileiro\n")
        f.write("# Ensina o bot a falar como gente normal, n√£o √©pico narrativo\n\n")
        
        # Conversas casuais simples
        f.write("# === CONVERSAS CASUAIS ===\n")
        for user, bot in casual:
            f.write(f"USER: {user}\n")
            f.write(f"BOT: {bot}\n")
            f.write("\n")
            total_conversations += 1
        
        # Conversas expandidas
        f.write("# === CONVERSAS EXPANDIDAS ===\n")
        for user, bot in expanded:
            f.write(f"USER: {user}\n")
            f.write(f"BOT: {bot}\n")
            f.write("\n")
            total_conversations += 1
        
        # Conversas multi-turn
        f.write("# === CONVERSAS MULTI-TURN ===\n")
        for conversation in multi_turn:
            for user, bot in conversation:
                f.write(f"USER: {user}\n")
                f.write(f"BOT: {bot}\n")
                f.write("\n")
                total_conversations += 1
        
        # Varia√ß√µes com g√≠rias e express√µes
        f.write("# === G√çRIAS E EXPRESS√ïES ===\n")
        girias = [
            ("valeu", "nada mano"),
            ("vlw", "tmj"),
            ("obg", "de nada"),
            ("blz", "suave"),
            ("td bem", "tudo sim"),
            ("tc", "falou"),
            ("flw", "at√© mais"),
            ("kkkk", "kkkkk n√©"),
            ("kkkkk", "rachei"),
            ("hahaha", "hahaha demais"),
            ("puts grila", "n√© mano"),
            ("eita porra", "pesado"),
            ("caralho", "forte"),
            ("que massa", "demais"),
            ("top demais", "show de bola"),
            ("dahora", "muito bom"),
            ("maneiro", "legal mesmo"),
            ("sinistro", "pesado"),
            ("brabo", "forte demais"),
            ("mitou", "arrasou")
        ]
        
        for user, bot in girias:
            f.write(f"USER: {user}\n")
            f.write(f"BOT: {bot}\n")
            f.write("\n")
            total_conversations += 1
    
    print(f"‚úÖ Dataset criado com {total_conversations} conversas!")
    return total_conversations

def generate_programming_help():
    """Gera conversas espec√≠ficas sobre programa√ß√£o"""
    
    programming_qa = [
        ("como come√ßar a programar", "python √© uma boa pra come√ßar, √© mais f√°cil"),
        ("que linguagem aprender", "python, javascript ou java s√£o populares"),
        ("python ou java", "python √© mais f√°cil, java mais usado em empresas"),
        ("como instalar python", "vai no site python.org e baixa a vers√£o mais nova"),
        ("que editor usar", "VSCode √© gratuito e muito bom"),
        ("erro de indenta√ß√£o", "python √© chatinho com espa√ßos, usa sempre 4 espa√ßos"),
        ("o que √© uma fun√ß√£o", "√© um bloco de c√≥digo que voc√™ pode reutilizar"),
        ("como fazer um loop", "for i in range(10): print(i) - isso imprime 0 a 9"),
        ("o que √© uma lista", "tipo um array, guarda v√°rios valores: lista = [1, 2, 3]"),
        ("como ler arquivo", "with open('arquivo.txt', 'r') as f: conteudo = f.read()"),
        ("git √© importante", "muito! aprende logo, vai usar sempre"),
        ("github √© necess√°rio", "sim, √© tipo rede social de programador"),
        ("como debuggar c√≥digo", "print() √© seu amigo, ou usa debugger do editor"),
        ("stackoverflow ajuda", "sempre! maior fonte de ajuda do programador"),
        ("quanto tempo pra aprender", "uns 6 meses pra b√°sico, mas nunca para de aprender"),
        ("vale a pena programar", "sim! √°rea em crescimento e sal√°rios bons"),
        ("freelancer ou empresa", "depende do perfil, empresa d√° mais seguran√ßa"),
        ("backend ou frontend", "backend √© servidor, frontend √© visual"),
        ("banco de dados importante", "muito! SQL √© essencial aprender"),
        ("framework ou vanilla", "aprende o b√°sico primeiro, depois frameworks")
    ]
    
    return programming_qa

def create_complete_dataset():
    """Cria dataset mega completo"""
    
    print("üî• CRIANDO MEGA DATASET DE PAPO REAL! üî•")
    
    # Cria dataset principal
    main_conversations = create_real_chat_dataset("data/real_chat_dataset.txt")
    
    # Adiciona conversas sobre programa√ß√£o
    prog_qa = generate_programming_help()
    
    with open("data/programming_chat.txt", 'w', encoding='utf-8') as f:
        f.write("# CONVERSAS SOBRE PROGRAMA√á√ÉO\n\n")
        for user, bot in prog_qa:
            f.write(f"USER: {user}\n")
            f.write(f"BOT: {bot}\n")
            f.write("\n")
    
    # Combina tudo
    with open("data/complete_real_chat.txt", 'w', encoding='utf-8') as f:
        # Dataset principal
        with open("data/real_chat_dataset.txt", 'r', encoding='utf-8') as main:
            f.write(main.read())
        
        f.write("\n# === CONVERSAS SOBRE PROGRAMA√á√ÉO ===\n")
        # Dataset de programa√ß√£o
        with open("data/programming_chat.txt", 'r', encoding='utf-8') as prog:
            f.write(prog.read())
        
        # Conversas originais (as boas)
        f.write("\n# === CONVERSAS ORIGINAIS CALIBRADAS ===\n")
        with open("data/chatbot_training.txt", 'r', encoding='utf-8') as orig:
            f.write(orig.read())
    
    print(f"‚úÖ MEGA DATASET COMPLETO criado!")
    print(f"üìä Arquivos criados:")
    print(f"   üó£Ô∏è data/real_chat_dataset.txt")
    print(f"   üíª data/programming_chat.txt") 
    print(f"   üöÄ data/complete_real_chat.txt (MEGA)")
    print(f"\nüéØ Agora o bot vai falar IGUAL GENTE!")

if __name__ == "__main__":
    create_complete_dataset()